/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");

const app = express();

app.use(bodyParser.json());

let toDos = [];
toDos.push({
  title: "ToDo1",
  completion: false,
  description: "Haha first Todo Sample created as you can clearly see"
});
toDos.push({
  title: "ToDo2",
  completion: false,
  description: "Haha second Todo Sample created as you can clearly see"
});

//----->FILE IO

// const data = `{title:"${toDos[0].title}",description:"${toDos[0].description}"}`;
// fs.writeFile("todos.txt", data, function (err) {
//   console.log("write successfull");
// });

// fs.readFile("todos.txt","utf-8", function (err, data) {
//   // const pr=JSON.parse(data);
//   console.log(data);
// })

// app.get("/todos",function(req,res){
//   fs.readFile("todos.txt","utf-8",function(err,data){

//     res.json(data);
//   })
//     //   res.send("Unfortunately an error occured while pulling the ToDos")
// })

const space = 0;
//   1.GET /todos - Retrieve all todo items
app.get("/todos", function (req, res) {
  res.status(200).json(toDos);
})
//  2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", function (req, res) {
  const id = req.params.id;
  if (id > toDos.length) res.status(403).send("Invalid ID");
  else {
    const data = toDos[id - 1];
    res.send(data);
  }
})
//  3. POST /todos - Create a new todo item
app.post("/todos", function (req, res) {
  const datarecieved = req.body;
  toDos.push(datarecieved);
  res.send("New ToDo Added");
})
//  4. PUT /todos/:id - Update an existing todo item by ID
app.put("/todos/:id", function (req, res) {
  const id = req.params.id;
  if (id > toDos.length) res.status(403).send("Invalid ID");
  else {
    const isCompleted = req.body.completion;
    toDos[id - 1].completion = isCompleted;
    res.send("Update Succesfull");
  }
})
//  5. DELETE /todos/:id - Delete a todo item by ID
app.delete("/todos/:id", function (req, res) {
  const id = req.params.id;
  if (id > toDos.length) res.status(403).send("Invalid ID");
  else {
    for (let i = id-1; i < toDos.length - 1; i++) {
      toDos[i] = toDos[i + 1];
    }
    toDos.pop();
    res.status(200).send("Deletion Succesfull");
  }
})

app.get("*",function(req,res){
  res.status(404).send("Invalid Page Requested 404")
})


app.listen(3000);
// module.exports = app;